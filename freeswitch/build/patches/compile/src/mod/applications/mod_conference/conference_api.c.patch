--- conference_api.c
+++ conference_api.c.new
@@ -77,6 +77,8 @@
 	{"unhold", (void_fn_t) & conference_api_sub_unhold, CONF_API_SUB_MEMBER_TARGET, "unhold", "<[member_id|all]|last|non_moderator>"},
 	{"mute", (void_fn_t) & conference_api_sub_mute, CONF_API_SUB_MEMBER_TARGET, "mute", "<[member_id|all]|last|non_moderator> [<quiet>]"},
 	{"tmute", (void_fn_t) & conference_api_sub_tmute, CONF_API_SUB_MEMBER_TARGET, "tmute", "<[member_id|all]|last|non_moderator> [<quiet>]"},
+	{"tag", (void_fn_t) & conference_api_sub_tag, CONF_API_SUB_MEMBER_TARGET, "tag", "<member_id> <string>"},
+	{"gettag", (void_fn_t) & conference_api_sub_gettag, CONF_API_SUB_ARGS_SPLIT, "gettag", "<tag> [nomatch]"},
 	{"unmute", (void_fn_t) & conference_api_sub_unmute, CONF_API_SUB_MEMBER_TARGET, "unmute", "<[member_id|all]|last|non_moderator> [<quiet>]"},
 	{"vmute", (void_fn_t) & conference_api_sub_vmute, CONF_API_SUB_MEMBER_TARGET, "vmute", "<[member_id|all]|last|non_moderator> [<quiet>]"},
 	{"tvmute", (void_fn_t) & conference_api_sub_tvmute, CONF_API_SUB_MEMBER_TARGET, "tvmute", "<[member_id|all]|last|non_moderator> [<quiet>]"},
@@ -466,6 +468,79 @@
 	return conference_api_sub_unmute(member, stream, data);
 }
 
+switch_status_t conference_api_sub_tag(conference_member_t *member, switch_stream_handle_t *stream, void *data)
+{
+	switch_event_t *event;
+
+	if (member == NULL)
+		return SWITCH_STATUS_GENERR;
+
+	member->tag = data ? switch_core_session_strdup(member->session, (char *)data) : NULL;
+
+	if (stream != NULL)
+	{
+		stream->write_function(stream, "+OK tag %u\n", member->id);
+	}
+	switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_DEBUG, "member %d set tag to %s\n", member->id, member->tag);
+
+	if (switch_event_create_subclass(&event, SWITCH_EVENT_CUSTOM, CONF_EVENT_MAINT) == SWITCH_STATUS_SUCCESS)
+	{
+		conference_member_add_event_data(member, event);
+		switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Action", "tag");
+		switch_event_add_header_string(event, SWITCH_STACK_BOTTOM, "Tag", member->tag ? member->tag : "");
+		switch_event_fire(&event);
+	}
+
+	return SWITCH_STATUS_SUCCESS;
+}
+
+switch_status_t conference_api_sub_gettag(conference_obj_t *conference, switch_stream_handle_t *stream, int argc, char **argv)
+{
+	const char *val = NULL;
+
+	if (argc < 3)
+	{
+		stream->write_function(stream, "-ERR missing tag\n");
+		return SWITCH_STATUS_GENERR;
+	}
+	else
+	{
+		conference_member_t *imember;
+		int count = 0;
+		const char *tag = argv[2];
+		const int nomatch = argc > 3 && !strcasecmp(argv[3], "nomatch");
+
+		switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_DEBUG, "conference_api_sub_gettag tag: %s nomatch %d\n", tag, nomatch);
+
+		/* iterate through conference members, collecting members that either match or don't match the specified tag */
+		for (imember = conference->members; imember; imember = imember->next)
+		{
+			if (imember->session)
+			{
+				if (nomatch)
+				{
+					if (!imember->tag || strcasecmp(imember->tag, tag))
+					{
+						switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_DEBUG, "conference_api_sub_gettag adding %d due to nomatch\n", imember->id);
+						stream_write(stream, count++ > 0 ? ",%d" : "%d", imember->id);
+					}
+				}
+				else
+				{
+					if (imember->tag && !strcasecmp(imember->tag, tag))
+					{
+						switch_log_printf(SWITCH_CHANNEL_LOG, SWITCH_LOG_DEBUG, "conference_api_sub_gettag adding %d due to match\n", imember->id);
+						stream_write(stream, count++ > 0 ? ",%d" : "%d", imember->id);
+					}
+				}
+			}
+		}
+		if (0 == count)
+			stream_write(stream, "", switch_str_nil(val));
+	}
+
+	return SWITCH_STATUS_SUCCESS;
+}
 
 switch_status_t conference_api_sub_unmute(conference_member_t *member, switch_stream_handle_t *stream, void *data)
 {
